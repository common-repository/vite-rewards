<?php
/**
 * Its Reward Point Module
 *
 * @since: 01/11/2023
 * @package Vite_Reward_Lite\Modules
 */

namespace Vite_Reward_Lite\Modules;

use Appsbd_Lite\V2\libs\API_Response;
use Vite_Reward_Lite\Core\Vite_Reward_Module_Lite;
use Vite_Reward_Lite\Libs\Vite_Custom_Field;
use Vite_Reward_Lite\Libs\Vite_Rule_Group;
use Vite_Reward_Lite\Libs\Vite_Rule_Item;
use Vite_Reward_Lite\Models\Database\Mapbd_Reward_Badge;
use Vite_Reward_Lite\Models\Database\Mapbd_Reward_Email_Template;
use Vite_Reward_Lite\Models\Database\Mapbd_Reward_Log;

/**
 * Class Woocom_Reward
 *
 * @package Vite_Reward_Lite\Modules
 */
class Vite_Woocom_Reward extends Vite_Reward_Module_Lite {

	/**
	 * The initialize is generated by appsbd
	 */
	public function initialize() {
	}
	/**
	 * The on active is generated by appsbd
	 */
	public function on_active() {
		parent::on_active();
	}

	/**
	 * The on table create is generated by appsbd
	 */
	public function on_table_create() {
		Mapbd_Reward_Log::create_db_table();
		Mapbd_Reward_Email_Template::create_db_table();
		Mapbd_Reward_Badge::create_db_table();
	}

	/**
	 * The on init is generated by appsbd
	 */
	public function on_init() {
		parent::on_init();
		add_filter( 'appsbd/vite-reward/filter/rules', array( $this, 'set_rules' ) );
		add_action( 'appsbd/vite-reward/action/update-rule-order', array( $this, 'update_order_rule' ) );
		add_action( 'woocommerce_order_status_completed', array( $this, 'action_on_order_status_completed' ), 20, 2 );
		add_action( 'woocommerce_order_refunded', array( $this, 'action_woocommerce_order_refunded' ), 20, 2 );
	}

	/**
	 * The action on order status completed is generated by appsbd
	 *
	 * @param mixed     $order_id order id.
	 * @param \WC_Order $order order object.
	 */
	public function action_on_order_status_completed( $order_id, $order ) {
		$found_rule = Vite_Reward_Rules::get_active_rule( 'PO' );
		if ( ! empty( $found_rule ) ) {
			$this->per_order_action( $found_rule, $order );
		}
		$found_rule = Vite_Reward_Rules::get_active_rule( 'OD' );
		if ( ! empty( $found_rule ) ) {
			$cal_condition = $found_rule->get_field_value( 'cal_cond' );
			$rule_points   = 0.00;
			if ( ! empty( $cal_condition ) ) {
				$rule_points = $this->get_rule_points( $cal_condition, $found_rule->points, $order );
			}
			if ( ! empty( $order->get_customer_id() ) ) {
				Vite_Reward_Settings::update_user_points( $order->get_customer_id(), 'O', $order->get_id(), $rule_points, 'From order amounts' );
			}
		}
	}

	/**
	 * The per order action is generated by appsbd
	 *
	 * @param mixed     $found_rule Founded Rule.
	 * @param \WC_Order $order Order.
	 */
	public function per_order_action( $found_rule, &$order ) {
		$rule_points = $found_rule->points;
		if ( $rule_points > 0 ) {
			if ( ! empty( $order->get_customer_id() ) ) {
				Vite_Reward_Settings::update_user_points( $order->get_customer_id(), 'O', $order->get_id(), $rule_points, 'From order', 'I', 'POP' );
			}
		}
	}

	/**
	 * The action woocommerce order refunded is generated by appsbd
	 *
	 * @param mixed $order_id order id.
	 * @param mixed $refund_id refund id.
	 */
	public function action_woocommerce_order_refunded( $order_id, $refund_id ) {
		$found_rule = Vite_Reward_Rules::get_active_rule( 'OR' );
		return;
	}
	/**
	 * The get rule points is generated by appsbd
	 *
	 * @param mixed     $rule its rule.
	 * @param mixed     $points its the cal point.
	 * @param \WC_Order $order Wc order.
	 *
	 * @return float|mixed
	 */
	public function get_rule_points( $rule, $points, &$order ) {
		$get_point = 0.0;
		if ( 'S' == $rule ) {
			$get_point = $order->get_subtotal() * $points;
		} elseif ( 'T' == $rule ) {
			$get_point = $order->get_total() * $points;
		} else {
			$get_point = $points;
		}
		return $get_point;
	}
	/**
	 * The update rule is generated by appsbd
	 *
	 * @param API_Response $response Its response.
	 */
	public function update_order_rule( &$response ) {
		$this->add_info( 'Successfully updated order rule' );
		$response->set_response( true );
	}
	/**
	 * The set rules is generated by appsbd
	 *
	 * @param mixed $rules Its the rules.
	 *
	 * @return mixed
	 */
	public function set_rules( $rules ) {

		$per_ord_point = new Vite_Rule_Item( 'PO', 'Per Order Points', 'Award points based on the number of orders placed by customers.' );
		$sign_up       = new Vite_Rule_Item( 'OD', 'Per Order Amount Points', 'Reward points based on the total amount spent in each order.' );
		$sign_up->add_field(
			Vite_Custom_Field::get_dropdown(
				'cal_cond',
				'Calculation',
				'',
				'N',
				'Select',
				'Y',
				array(
					array(
						'val'   => 'S',
						'title' => $this->__( 'Point Multiply with Subtotal' ),
					),
					array(
						'val'   => 'T',
						'title' => $this->__( 'Point Multiply with Order Total' ),
					),
					array(
						'val'   => 'F',
						'title' => $this->__( 'Fixed Point' ),
					),
				)
			)
		);
		$sign_up->add_field(
			Vite_Custom_Field::get_switch( 'is_max', 'Is Set Max Point', 'N', 'R' )
		);
		$ord_range = new Vite_Rule_Item( 'AR', 'On Order Amount Range', 'Define point rewards based on specific order amount ranges to encourage larger purchases.', 'R' );
		$ord_range->add_field(
			Vite_Custom_Field::get_numeric(
				'MN',
				'Min Amount',
				'',
				'N',
				'',
				'Min Amount',
				'',
				'',
				'A'
			)
		);
		$ord_range->add_field(
			Vite_Custom_Field::get_numeric(
				'MX',
				'Max Amount',
				'',
				'N',
				'',
				'Max Amount',
				'',
				'',
				'A'
			)
		);

		$sign_re = new Vite_Rule_Item( 'OR', 'On order Refund', 'Automatically deduct points if an order is refunded, ensuring fair point management.', 'R' );
		$sign_re->add_field(
			Vite_Custom_Field::get_dropdown(
				'cal_cond',
				'Calculation',
				'',
				'N',
				'Select',
				'Y',
				array(
					array(
						'val'   => 'S',
						'title' => $this->__( 'Point Multiply with Subtotal' ),
					),
					array(
						'val'   => 'T',
						'title' => $this->__( 'Point Multiply with Order Total' ),
					),
					array(
						'val'   => 'F',
						'title' => $this->__( 'Fixed Point' ),
					),
				)
			)
		);

		$test_re = new Vite_Rule_Item( 'te', 'Test order rules field', 'This rule is just for testing purpose' );
		$test_re->add_field(
			Vite_Custom_Field::get_textbox( 'text', 'Test Text', '', 'N', 'Y', 'Test Textbox', 'Text box tooltip', 'Simple Description added', 'A' )
		);
		$test_re->add_field(
			Vite_Custom_Field::get_numeric( 'num', 'Test Numeric', '', 'N', 'Y', 'Test Numeric', 'Numeric tooltip', 'Simple Numeric Description added', 'A' )
		);
		$test_re->add_field(
			Vite_Custom_Field::get_date( 'date', 'Point Validity', '', 'N', 'Y', 'Test Date', 'Date panel', 'Date Description added', 'A' )
		);
		$test_re->add_field(
			Vite_Custom_Field::get_switch( 'switch', 'Switch Box', 'Y', 'N', 'Y', 'N', 'Switch panel Tooltip', 'Switch Description added', 'A' )
		);
		$test_re->add_field(
			Vite_Custom_Field::get_radio(
				'radio',
				'Radio Box',
				'S',
				'N',
				array(
					array(
						'val'   => 'S',
						'title' => $this->__( 'Test 1' ),
					),
					array(
						'val'   => 'T',
						'title' => $this->__( 'Test 2' ),
					),
					array(
						'val'   => 'F',
						'title' => $this->__( 'Test 3' ),
					),
				),
				'Hello this is a test check box',
				'Checkbox Description added',
				'A'
			)
		);
		$test_re->add_field(
			Vite_Custom_Field::get_checkbox(
				'check-1',
				'Check Box 1',
				'',
				'R',
				'Y',
				array(
					array(
						'val'   => 'S',
						'title' => $this->__( 'Test 1' ),
					),
					array(
						'val'   => 'T',
						'title' => $this->__( 'Test 2' ),
					),
					array(
						'val'   => 'F',
						'title' => $this->__( 'Test 3' ),
					),
				),
				'2',
				'Hello this is a test check box',
				'Checkbox Description added',
				'A'
			)
		);
		$test_re->add_field(
			Vite_Custom_Field::get_checkbox(
				'check-2',
				'Check Box 2',
				'',
				'N',
				'Y',
				array(
					array(
						'val'   => 'S',
						'title' => $this->__( 'Test 1' ),
					),
					array(
						'val'   => 'T',
						'title' => $this->__( 'Test 2' ),
					),
					array(
						'val'   => 'F',
						'title' => $this->__( 'Test 3' ),
					),
				),
				'2',
				'Hello this is a test check box',
				'Checkbox Description added',
				'A'
			)
		);
		$test_re->add_field(
			Vite_Custom_Field::get_dropdown(
				'drop',
				'Test Dropdown',
				'',
				'N',
				'Select Test',
				'Y',
				array(
					array(
						'val'   => 'S',
						'title' => $this->__( 'Drop 1' ),
					),
					array(
						'val'   => 'T',
						'title' => $this->__( 'Drop 2' ),
					),
					array(
						'val'   => 'F',
						'title' => $this->__( 'Drop 3' ),
					),
					array(
						'val'   => 'G',
						'title' => $this->__( 'Drop 4' ),
					),
				),
				'2',
				'Hello this is a Dropdown box',
				'Dropdown Description added',
				'A'
			)
		);

		$group = new Vite_Rule_Group( 'order', 'Order Rules' );
		$group->add_rule_item( $per_ord_point );
		$group->add_rule_item( $sign_up );
		$group->add_rule_item( $ord_range );
		$group->add_rule_item( $sign_re );
				$rules = array_merge( $rules, $group->get_rules() );
		return $rules;
	}
}
