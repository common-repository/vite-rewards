<?php
/**
 * Reward Setting module
 *
 * @package Vite_Reward_Lite\Modules
 */

namespace Vite_Reward_Lite\Modules;

use Appsbd_Lite\V2\libs\Ajax_Confirm_Response;
use Vite_Reward_Lite\Core\Vite_Reward_Module_Lite;
use Vite_Reward_Lite\Models\Database\Mapbd_Reward_Email_Template;
use Vite_Reward_Lite\Models\Database\Mapbd_Reward_Log;


/**
 * Class Reward_Rules
 *
 * @package Vite_Reward_Lite\Modules
 */
class Vite_Reward_Settings extends Vite_Reward_Module_Lite {


	/**
	 * The on initialize is generated by appsbd
	 */
	public function initialize() {
	}

	/**
	 * The on init is generated by appsbd
	 */
	public function on_init() {
		parent::on_init();
		$this->add_ajax_action( 'option', 'ajax_request_callback' );
		$this->add_ajax_action( 'get-option', 'get_admin_options' );
		add_action( 'appsbd/vite-reward/action/send-email', array( $this, 'send_email' ), 9, 2 );
		add_action( 'woocommerce_order_status_completed', array( $this, 'send_email_on_order_complete' ), 999, 2 );
		add_action( 'user_register', array( $this, 'send_email_on_user_reg' ), 999, 1 );  }

	/**
	 * The send email on order complete is generated by appsbd
	 *
	 * @param mixed     $order_id Order Id.
	 * @param \WC_Order $order Order.
	 */
	public function send_email_on_order_complete( $order_id, $order ) {
		$new_log = new Mapbd_Reward_Log();
		$logs    = Mapbd_Reward_Log::find_all_by( 'ref_val', $order_id, array( 'ref_type' => 'O' ) );
		if ( ! empty( $logs ) ) {
			foreach ( $logs as $log ) {
				$new_log->point_val += $log->point_val;
				$new_log->msg        = 'On order complete';
				$new_log->user_id    = $log->user_id;
				$new_log->type       = 'I';
				$new_log->ref_val    = $log->ref_val;
				$new_log->ref_type   = 'O';
				if ( empty( $new_log->prev_point ) ) {
					$new_log->prev_point = $log->prev_point;
				}
			}
		}
		if ( ! empty( $new_log ) ) {
			$this->send_email( $new_log, 'POP' );
		}
	}

	/**
	 * The send email on user reg is generated by appsbd
	 *
	 * @param mixed $user_id New user Id.
	 */
	public function send_email_on_user_reg( $user_id ) {
		$user = get_userdata( $user_id );
		$log  = Mapbd_Reward_Log::find_by( 'user_id', $user_id, array( 'ref_type' => 'U' ) );
		if ( ! empty( $log ) && ! empty( $user->user_email ) ) {
			$this->send_email( $log, 'SUP' );
		}
	}
	/**
	 * The send email is generated by appsbd
	 *
	 * @param Mapbd_Reward_Log $reward_log Get reward log.
	 * @param string           $key Get email key.
	 */
	public function send_email( $reward_log, $key = '' ) {
		self::send_reward_email( $reward_log, $key );
	}

	/**
	 * The send reward email is generated by appsbd
	 *
	 * @param mixed $log_obj Get log obj.
	 * @param mixed $key Get email key.
	 */
	public static function send_reward_email( $log_obj, $key ) {
		$user             = get_user_by( 'id', $log_obj->user_id );
		$params           = array();
		$params['points'] = $log_obj->point_val;
		$points           = $log_obj->prev_point;
		if ( 'O' == $log_obj->type ) {
			$points = $points - $log_obj->point_val;
		} else {
			$points = $points + $log_obj->point_val;
		}
		$params['total_points']  = $points;
		$params['customer_name'] = apbd_get_user_title_by_user( $user );
		if ( 'O' == $log_obj->ref_type ) {
			$params['order_no'] = $log_obj->ref_val;
			$order              = wc_get_order( $log_obj->ref_val );

			$params['sub_total']   = $order->get_subtotal();
			$params['order_total'] = $order->get_total();
		}
		$params['profile_link']        = self::get_profile_link( $log_obj->user_id );
		$params['view_profile_anchor'] = '<a href="' . $params['profile_link'] . '">' . $log_obj->__( 'View Profile' ) . '</a>';
		$params['msg']                 = $log_obj->msg;
		Mapbd_Reward_Email_Template::send_email_templates( $key, $user->user_email, $params, '' );
	}

	/**
	 * The get profile link is generated by appsbd
	 *
	 * @param mixed $user_id User Id.
	 *
	 * @return false|string
	 */
	public static function get_profile_link( $user_id ) {
		$a = get_permalink( wc_get_page_id( 'myaccount' ) );
		return $a;
	}

	/**
	 * The ajax request callback is generated by appsbd
	 */
	public function ajax_request_callback() {
		$response = new Ajax_Confirm_Response();
		if ( $this->update_request_option() ) {
			$this->get_admin_options();
		}
		$response->display_with_response( false, $this->get_admin_options() );
	}

	/**
	 * The get admin settings is generated by appsbd
	 */
	public function get_admin_options() {
		$response = new Ajax_Confirm_Response();
		$response->display_with_response( true, $this->options );
	}

	/**
	 * The update user points is generated by appsbd
	 *
	 * @param any    $user_id Its user id.
	 * @param any    $ref_type Its log ref type.
	 * @param any    $ref_val Its log ref val.
	 * @param mixed  $rule_points Rule Points.
	 * @param mixed  $msg Log Msg.
	 * @param string $opr Checkin operator.
	 * @param string $key key Email key.
	 *
	 * @return bool
	 */
	public static function update_user_points( $user_id, $ref_type, $ref_val, $rule_points, $msg, $opr = 'I', $key = '' ) {
		$prev_points = 0.0;
		$points      = 0.0;
				$prev_points = self::user_prev_reward_points( $user_id, $opr );
		if ( 'O' == $opr && $prev_points < $rule_points ) {
			return false;
		}
		$points = $prev_points + $rule_points;
		if ( $points > 0 ) {
			if ( 'O' == $opr ) {
				$o_points = 0.0;
				if ( metadata_exists( 'user', $user_id, 'apbd_reward_out' ) ) {
					$o_points = floatval( get_user_meta( $user_id, 'apbd_reward_out', true ) );
				}
				$o_points = $o_points + $rule_points;
				if ( update_user_meta( $user_id, 'apbd_reward_out', $o_points ) ) {
					$log = Mapbd_Reward_Log::AddLog( $opr, $user_id, $prev_points, $rule_points, $msg, $ref_val, $ref_type );
					return ! empty( $log );
				}
			} else {
				$o_points = 0.0;
				if ( metadata_exists( 'user', $user_id, 'apbd_reward_in' ) ) {
					$o_points = floatval( get_user_meta( $user_id, 'apbd_reward_in', true ) );
				}
				$o_points = $o_points + $rule_points;
				if ( update_user_meta( $user_id, 'apbd_reward_in', $o_points ) ) {
					$log = Mapbd_Reward_Log::AddLog( $opr, $user_id, $prev_points, $rule_points, $msg, $ref_val, $ref_type );
					return ! empty( $log );
				}
			}
		}
	}

	/**
	 * The user reward point is generated by appsbd
	 *
	 * @param mixed $user_id Wp User Id.
	 *
	 * @return float
	 */
	public static function user_reward_point( $user_id ) {
		$points = 0.0;
		if ( metadata_exists( 'user', $user_id, 'apbd_reward_in' ) ) {
			$points = floatval( get_user_meta( $user_id, 'apbd_reward_in', true ) );
			if ( metadata_exists( 'user', $user_id, 'apbd_reward_out' ) ) {
				$points = $points - floatval( get_user_meta( $user_id, 'apbd_reward_out', true ) );
			}
		}
		return $points;
	}

	/**
	 * The user reward point is generated by appsbd
	 *
	 * @param mixed  $user_id Wp User Id.
	 *
	 * @param string $type Reward type.
	 *
	 * @return float
	 */
	public static function user_prev_reward_points( $user_id, $type = 'I' ) {
		$prev_points = 0.0;
		if ( metadata_exists( 'user', $user_id, 'apbd_reward_in' ) ) {
			$prev_points = floatval( get_user_meta( $user_id, 'apbd_reward_in', true ) );
		}
		if ( metadata_exists( 'user', $user_id, 'apbd_reward_out' ) ) {
			$prev_points = $prev_points - floatval( get_user_meta( $user_id, 'apbd_reward_out', true ) );
		}
		return $prev_points;
	}
}
